spring:
  application:
    name: order-service
  datasource:
    # jdbc:mysql://${MYSQL_HOST:mysql-standalone}:3306/db_order
    url: jdbc:mysql://localhost:3306/db_order?createDatabaseIfNotExits=true&useUnicode=yes&characterEncoding=utf8
    username: hoangtd5
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    # Keep the connection alive if idle for a long time (needed in production)
    dbcp2:
      test-while-idle: true
      validation-query: SELECT 1
    jpa:
      # Show or not log for each sql query
      database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
      show-sql: true
      generate-ddl: true
      hibernate:
        # drop n create table, good for testing, comment this in production
        # validate: validate the schema, makes no changes to the database.
        # update: update the schema.
        # create: creates the schema, destroying previous data.
        # create-drop: drop the schema at the end of the session.
        ddl-auto: update
        #`hibernate_sequence' doesn't exist
        use-new-id-generator-mappings: false
  boot:
    admin:
      # setting client & register security to admin
      client:
        username: admin
        password: admin
        url: http://localhost:8094
        instance:
          metadata:
            user:
              name: admin
              password: admin
    # rabbitmq
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  cache:
    type: redis
    redis:
      cache-null-values: false
      time-to-live: 600000
      use-key-prefix: false
  # redis config
  redis:
    host: localhost
    port: 6379
    ssl: false
    timeout: 12m
    jedis:
      pool:
        max-active: 1
        max-idle: 25
        max-wait: 30000ms
        min-idle: 5
    mail:
      default-encoding: UTF-8
      host: smtp.gmail.com
      username: duyhoangptit@gmail.com
      password: 0976653494
      port: 587
      properties:
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
      protocol: smtp
      test-connection: false

management:
  security:
    enabled: false
  endpoints:
    web:
      exposure:
        include: "*"
    health:
      show-details: always

security:
  oauth2:
    client:
      client-id: tiger
      client-secret: tiger-app
      accessTokenUri: http://localhost:9191/oauth/token
      grantType: client_credentials
    resource:
      filter-order: 3
      jwt:
        key-value: -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzEBuTO5N6RhomHDLZSGj
          e6pqMWbyuz7zHcgjkRayZ+F9QPoSV77BWMtl1MgCWbCZEW1kq/hIw28lBCbld9NR
          TViUPd0Q9mUqYuJXn0ktt1iso9eDYRjwFx6RGJo6i0RqHAGVr09vDjbiUP01/sG/
          lcnGlNshjbCY6ULWkLXInfCVAtgrj8tts2noIddskwnKW3htRv98xZYbtqC4oirQ
          rmQdSOoIysDsEmfV856DayNAuSEpVbnPOHGS5v6KuxrhpYnfovstWN/ddgSjvgKy
          J5jFQZ6wXEF/UdrQJpFvNOKtAyarKVMtOi7tujtcVOKVGfrOpo3I+KwjiZjBBH0B
          GQIDAQAB
          -----END PUBLIC KEY-----


#eureka:
#  client:
#    registryFetchIntervalSeconds: 5
#    registerWithEureka: true
#    fetchRegistry: true
#    serviceUrl:
#      defaultZone: http://localhost:8070/eureka
#  instance:
#    hostname: localhost

