spring:
  application:
    name: order-service
  datasource:
    # jdbc:mysql://${MYSQL_HOST:mysql-standalone}:3306/db_order
    url: jdbc:mysql://localhost:3306/db_order?createDatabaseIfNotExits=true&useUnicode=yes&characterEncoding=utf8
    username: hoangtd5
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    # Keep the connection alive if idle for a long time (needed in production)
    dbcp2:
      test-while-idle: true
      validation-query: SELECT 1
    jpa:
      # Show or not log for each sql query
      database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
      show-sql: true
      generate-ddl: true
      hibernate:
        # drop n create table, good for testing, comment this in production
        # validate: validate the schema, makes no changes to the database.
        # update: update the schema.
        # create: creates the schema, destroying previous data.
        # create-drop: drop the schema at the end of the session.
        ddl-auto: update
        #`hibernate_sequence' doesn't exist
        use-new-id-generator-mappings: false
  boot:
    admin:
      # setting client & register security to admin
      client:
        username: ${spring.security.user.name}
        password: ${spring.security.user.password}
        url: http://localhost:8094
        instance:
          metadata:
            user:
              name: ${spring.security.user.name}
              password: ${spring.security.user.password}
   # rabbitmq
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  cache:
    type: redis
    redis:
      cache-null-values: false
      time-to-live: 600000
      use-key-prefix: false
  # redis config
  redis:
    host: localhost
    port: 6379
    ssl: false
    timeout: 12m
    jedis:
      pool:
        max-active: 1
        max-idle: 25
        max-wait: 30000ms
        min-idle: 5 

management:
  security:
    enabled: false
  endpoints:
    web:
      exposure:
        include: "*"
    health:
      show-details: always

security:
  oauth2:
    resource:
      token-info-uri: http://localhost:9191/oauth/check_token
      id: order-service
      jwt:
        key-value: AAAAB3NzaC1yc2EAAAADAQABAAABAQChB90AepmJva8ACiEDEtqxC5omPrNM2/h2
          21s96DoYEvVAHXk/jcI1yGD3394mBMB4HdaAl14pM+VOhyyOy09/CGW41Ud10RZW
          yY2TRxpAevFK3Cyf93V5H2/kE1pktrUvlQFOXq/pH6mxbHXr6w4jNYrcWJGzZDD7
          HvOLtnVkKNCVmz17EjT9SM0GbWtrUoPT519O9S6b0YEykA58EHKtbKwjrD5TvBKW
          1gx6yrZMlWJKOfuDwW6nUnOniKel/4O2W8tAt0Lwk8HGY1Zkbjgs5CMN4OUtNYHX
          dJuvyzHifuH7krh6fAJ5kDG0fqs6WRaMd+VVYDRqH8Q9hwN9jbk5
    client:
      client-id: mobile
      client-secret: pin

#eureka:
#  client:
#    registryFetchIntervalSeconds: 5
#    registerWithEureka: true
#    fetchRegistry: true
#    serviceUrl:
#      defaultZone: http://localhost:8070/eureka
#  instance:
#    hostname: localhost
